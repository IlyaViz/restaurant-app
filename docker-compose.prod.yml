services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: /bin/sh -c "python manage.py collectstatic --noinput && gunicorn backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DOMAIN=${DOMAIN}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
    depends_on:
      - postgres
    
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
      args:
        VITE_BACKEND_API_URL: https://${DOMAIN}/backend/api
        DOMAIN: ${DOMAIN}
    volumes:
      - certbot:/etc/letsencrypt
      - static_volume:/static
    ports:
      - "443:443"
    depends_on:
      backend:
        condition: service_started
      certbot:
        condition: service_completed_successfully

  certbot:
    image: certbot/certbot
    volumes:
      - certbot:/etc/letsencrypt
    command: ["certonly", "--standalone", "--non-interactive", "--agree-tos","-d", "${DOMAIN}"]
    ports:
      - "80:80"

  postgres:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}

volumes:
  postgres_data:
  certbot:
  static_volume: